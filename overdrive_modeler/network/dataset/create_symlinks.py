import os
from glob import glob
os.chdir(os.path.dirname(os.path.abspath(__file__)))

# Ardan
# DATASET_RAW_PATH       = "/mnt/volDISI_conci_Datasets/audio/pedals/dataset_raw"
# DATASET_PROCESSED_PATH = "/mnt/volDISI_conci_Datasets/audio/pedals/dataset_48"
# OTHER_PATHS =           ["/mnt/volDISI_conci_Datasets/audio/pedals/dataset_32"]
# Dom
DATASET_RAW_PATH       = "/home/cimil-01/Develop/dafx25-ArdanDomPedaliny/DB_DISK/dataset_raw"
DATASET_PROCESSED_PATH = "/home/cimil-01/Develop/dafx25-ArdanDomPedaliny/DB_DISK/dataset_48"
OTHER_PATHS =           ["/home/cimil-01/Develop/dafx25-ArdanDomPedaliny/DB_DISK/dataset_32"]


audiofiles_raw_paths = glob(os.path.join(DATASET_RAW_PATH, "*.wav"))
foldernames = sorted(list(set([os.path.basename(a).split('_')[0] for a in audiofiles_raw_paths])))
foldernames.append('input')
if '0-unprocessed' in foldernames:
    foldernames.remove('0-unprocessed')

for fn in foldernames:
    os.makedirs(os.path.join(DATASET_PROCESSED_PATH, fn), exist_ok=True)

folders_in_processed = glob(os.path.join(DATASET_PROCESSED_PATH, "*/"))
print('\n'.join(folders_in_processed))

links_created = []

for fn in foldernames:
    original_path = os.path.join(DATASET_PROCESSED_PATH, fn)
    assert os.path.exists(original_path), f"Path {original_path} does not exist"
    target_path = os.path.join('.', fn)

    if os.path.exists(target_path) and os.path.islink(target_path):
        os.unlink(target_path)

    print(f"ln -s {original_path}\t{target_path}")
    os.symlink(src=original_path, dst=target_path)
    links_created.append(os.path.basename(target_path))

with open('.gitignore', 'w') as f:
    print("# Automatically generated by create_symlinks.py\n", file=f)
    print('\n'.join(links_created), file=f)


# Now create symlink for dataset_raw
assert os.path.exists(DATASET_RAW_PATH), f"Path {DATASET_RAW_PATH} does not exist"
target_path = os.path.join('..', 'dataset_raw')
if os.path.exists(target_path) and os.path.islink(target_path):
    os.unlink(target_path)
os.symlink(src=DATASET_RAW_PATH, dst=target_path)

# Now create symlink for other paths
for op in OTHER_PATHS:
    assert os.path.exists(op), f"Path {op} does not exist"
    target_path = os.path.join('..', os.path.basename(op))
    if os.path.exists(target_path) and os.path.islink(target_path):
        os.unlink(target_path)
    os.symlink(src=op, dst=target_path)
